name: Halo Build and Deploy

on:
  release:
    types: # This configuration does not affect the page_build event above
      - created

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    # Default steps
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Gradle wrapper
        id: cache-gradle-wrapper
        uses: actions/cache@v2.1.3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-dependencies-

      - name: Cache Dependencies
        id: cache-dependencies
        uses: actions/cache@v2.1.3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-dependencies-

      - name: Check And Test
        run: ./gradlew check

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Get Name of Artifact
        id: get_artifact
        if: github.event_name == 'release'
        run: |
          ARTIFACT_PATHNAME=$(ls build/libs/*.jar | head -n 1)
          ARTIFACT_NAME=$(basename ${ARTIFACT_PATHNAME})
          echo "Artifact pathname: ${ARTIFACT_PATHNAME}"
          echo "Artifact name: ${ARTIFACT_NAME}"
          echo "ARTIFACT_PATHNAME=${ARTIFACT_PATHNAME}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
          echo "RELEASE_ID=${{ github.event.release.upload_url }}" >> $GITHUB_ENV

#      - name: Upload a Release Asset
#        uses: actions/upload-release-asset@v1.0.2
#        if: github.event_name == 'release'
#        with:
#          upload_url: ${{ github.event.release.upload_url }}
#          asset_path: ${{ env.ARTIFACT_PATHNAME }}
#          asset_name: ${{ env.ARTIFACT_NAME }}
#          asset_content_type: application/zip
      - name: Upload a Release Asset
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('environment', process.versions);

            const fs = require('fs').promises;

            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });

            const releaseId = process.env.RELEASE_ID
            console.log(`Trying to release to: ${releaseId}`)

            for (let file of await fs.readdir('build/libs/*.jar')) {
              // do whatever filtering you want here, I'm just uploading all the files
              console.log('uploading', file);

              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./${file}`)
              });
            }

      - name: Docker build for unstable version
        run: docker info

      - name: Docker build for stable version
        run: docker info